
## Part 1: Knowledge Graphs â€“ Summary of Key Concepts

This summary reflects insights from the early chapters of *Knowledge Graphs: Fundamentals, Techniques, and Applications* 
by Kejriwal, Knoblock, and Szekely, along with real-world modeling examples like [Wikidata](https://www.wikidata.org/wiki/Wikidata:Data_model).

### Overview

Knowledge graphs (KGs) are structured representations of entities and their relationships, enabling semantic understanding and machine reasoning. 
Core to this is the use of RDF (Resource Description Framework) triples and ontologies that define types and relationships. Real-world KGs like 
Wikidata extend this further by using a property-centric model with richly annotated facts, qualifiers, and provenance.

---

## Key Ideas

### 1. Semantic Enrichment through Ontologies and RDFS

Ontologies provide semantic structure by defining classes, subclasses, and types using `rdfs:Class`, `rdfs:subClassOf`, and `rdf:type`. 
This allows knowledge graphs to support hierarchical reasoning and structured queries.

---

### 2. Property-Centric Modeling Enables Richer Context

Wikidata exemplifies a property-centric model where properties (`P31`, `P21`, etc.) define not just relations but carry additional metadata 
such as qualifiers and sources. This supports more expressive, context-aware knowledge representation.

[Wikidata Data Model Documentation](https://www.wikidata.org/wiki/Wikidata:Data_model)

---

### 3. RDF Triples Promote Interoperability and Extensibility

The RDF triple structure `(subject, predicate, object)` provides a universal format for expressing knowledge. It supports linking diverse 
datasets and querying with tools like SPARQL.

**Example**:  
`(:Tesla, :isTypeOf, :ElectricCar)`  
This fact can be easily linked to broader data via URIs and ontologies.

[W3C RDF 1.1 Primer](https://www.w3.org/TR/rdf11-primer/)

---
